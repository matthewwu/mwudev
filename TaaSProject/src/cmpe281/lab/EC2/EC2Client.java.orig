package cmpe281.lab.EC2;


import java.io.IOException;
import java.util.*;

import com.amazonaws.services.ec2.model.*;
import com.amazonaws.AmazonClientException;
import com.amazonaws.AmazonServiceException;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.PropertiesCredentials;
import com.amazonaws.services.ec2.AmazonEC2;
import com.amazonaws.services.ec2.AmazonEC2Client;
import com.amazonaws.services.ec2.model.DescribeInstancesResult;
import com.amazonaws.services.ec2.model.Instance;
import com.amazonaws.services.ec2.model.Reservation;
import com.amazonaws.services.cloudwatch.AmazonCloudWatchClient;
import com.amazonaws.services.cloudwatch.model.Datapoint;
import com.amazonaws.services.cloudwatch.model.Dimension;
import com.amazonaws.services.cloudwatch.model.GetMetricStatisticsRequest;
import com.amazonaws.services.cloudwatch.model.GetMetricStatisticsResult;

public class EC2Client{

	private AWSCredentials credentials;
	private static AmazonEC2 ec2;
<<<<<<< mine
	@SuppressWarnings("unused")
=======
	private static AmazonCloudWatchClient CWClient;
>>>>>>> theirs
	private KeyPair keyPair;
	
	public EC2Client()
	{
		try {
			credentials = new PropertiesCredentials(
					getClass().getClassLoader().getResourceAsStream("AwsCredentials.properties"));
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		ec2 = new AmazonEC2Client(credentials);
		CWClient = new AmazonCloudWatchClient(credentials);
	}	
	
	/*
	 * Get All Instances
	 */
	public Set<Instance> GetAllInstance()
	{						
		DescribeInstancesResult describeInstancesRequest = ec2.describeInstances();
        List<Reservation> reservations = describeInstancesRequest.getReservations();
        Set<Instance> instances = new HashSet<Instance>();

        for (Reservation reservation : reservations) {
            instances.addAll(reservation.getInstances());
        }
        
        return instances;
	}
	
	/*
	 * Get Instance by its Id
	 */
	public Instance GetInstance(String InstanceId)
	{
		Instance temp = null;
		Set<Instance> MyInstances = GetAllInstance();
		for (Instance item : MyInstances) {
		   if(item.getInstanceId() == InstanceId)
		   {
			   temp = item;			   
		   }
		  }
		
		return temp;
	}
	
	/*
	 * Start instance by its Id
	 */
	public  StartInstancesResult startInstance(final String instanceId)
	        throws AmazonServiceException, AmazonClientException, InterruptedException
	{
	    StartInstancesRequest startRequest = new StartInstancesRequest().withInstanceIds(instanceId);
	    StartInstancesResult startResult = ec2.startInstances(startRequest);	    	    
	    
	    return startResult;
	 }
	
	/*
	 * Stop instance by its Id
	 */
	public StopInstancesResult stopInstances(String instanceId)
            throws AmazonServiceException,AmazonClientException
   {
		StopInstancesRequest stopRequest = new StopInstancesRequest().withInstanceIds(instanceId);
		StopInstancesResult stopResult = ec2.stopInstances(stopRequest);
		
		return stopResult;
   }

	/*
	 * Get all AIMs
	 */
	public List<Image> GetAIMs()
	{			
		
		DescribeImagesResult ImageResult = ec2.describeImages();
		
		return ImageResult.getImages();
	
	}
	
	/*
	 * createAMInstances(amiId, 1, 1, keyPairName, "m1.small", "us-east-1a");
	 */
	public RunInstancesResult createAMInstances(String AMId, int min, int max,
			String keyPairName, String insType, String availabilityZone)
			throws Exception 
	{
		RunInstancesRequest request = new RunInstancesRequest();
		request.setInstanceType(insType);
		request.setMinCount(min);
		request.setMaxCount(max);
		// set to zone
		Placement p = new Placement();
		p.setAvailabilityZone(availabilityZone);
		request.setPlacement(p);
		request.setImageId(AMId);
		// Create key pair for user..
		CreateKeyPairRequest kpReq = new CreateKeyPairRequest();
		kpReq.setKeyName(keyPairName);
		CreateKeyPairResult kpres = ec2.createKeyPair(kpReq);
		keyPair = kpres.getKeyPair();
		
		request.setKeyName(keyPairName);
		RunInstancesResult runInstancesRes = ec2.runInstances(request);
		
		return runInstancesRes;
		
	}
		
	public Double GetLastHourCPUAvg(String InstanceId)
	{
		Double Usage = 0.0;
		long offsetInMilliseconds = 1000 * 60 * 60 * 1;
    	GetMetricStatisticsRequest request = new GetMetricStatisticsRequest()
    	.withStartTime(new Date(new Date().getTime() - offsetInMilliseconds))
    	.withNamespace("AWS/EC2")
    	.withPeriod(60 * 60)
    	//.withDimensions(new Dimension().withName("InstanceType").withValue("t1.micro"))
    	.withDimensions(new Dimension().withName("InstanceId").withValue(InstanceId))
    	.withMetricName("CPUUtilization")        	
    	.withStatistics("Average", "Maximum")        	
    	.withEndTime(new Date());        	
    	GetMetricStatisticsResult result = CWClient.getMetricStatistics(request);
    	//System.out.println("metrics label = "+result.getLabel());
    	//System.out.println("Count:" + result.getDatapoints().size());
    	
    	for (Datapoint dp : result.getDatapoints()) {            		    		       
    		Usage = dp.getAverage();
    	}
    	return Usage;
	
	}
	
	public Double GetLastHourCPUMax(String InstanceId)
	{
		Double Usage = 0.0;
		long offsetInMilliseconds = 1000 * 60 * 60 * 1;
    	GetMetricStatisticsRequest request = new GetMetricStatisticsRequest()
    	.withStartTime(new Date(new Date().getTime() - offsetInMilliseconds))
    	.withNamespace("AWS/EC2")
    	.withPeriod(60 * 60)
    	//.withDimensions(new Dimension().withName("InstanceType").withValue("t1.micro"))
    	.withDimensions(new Dimension().withName("InstanceId").withValue(InstanceId))
    	.withMetricName("CPUUtilization")        	
    	.withStatistics("Average", "Maximum")        	
    	.withEndTime(new Date());        	
    	GetMetricStatisticsResult result = CWClient.getMetricStatistics(request);
    	//System.out.println("metrics label = "+result.getLabel());
    	//System.out.println("Count:" + result.getDatapoints().size());
    	
    	for (Datapoint dp : result.getDatapoints()) {            		    		       
    		Usage = dp.getMaximum();
    	}
    	return Usage;
	
	}
}
